{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie/index.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstdate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.202efab2.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nconst API_KEY = \"707d317d611e0c84c011c378d044c09c\";\r\nconst API_BASE = \"https://api.themoviedb.org/3\";\r\n\r\n// originais netflix\r\n// recomendados (trending)\r\n// em alta (top rated)\r\n// ação\r\n// comédia\r\n// terror\r\n// documentários\r\n\r\n//construindo o meu fetch de pesquisa para cada lista que for precisar\r\n// endpoint = slug\r\nconst basicFetch = async (endpoint) => {\r\n\tconst req = await fetch(`${API_BASE}${endpoint}`);\r\n\tconst json = await req.json();\r\n\treturn json;\r\n};\r\n\r\n// cada uma dessas informações será uma consulta diferente\r\nexport default {\r\n\tgetHomeList: async () => {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tslug: \"originals\",\r\n\t\t\t\ttitle: \"Originais Netflix\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: \"trending\",\r\n\t\t\t\ttitle: \"Recomendados para você\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/trending/all/week?language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: \"toprated\",\r\n\t\t\t\ttitle: \"Em Alta\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: \"action\",\r\n\t\t\t\ttitle: \"Ação\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: \"comedy\",\r\n\t\t\t\ttitle: \"Comédia\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: \"horror\",\r\n\t\t\t\ttitle: \"Terror\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: \"documentary\",\r\n\t\t\t\ttitle: \"Documentários\",\r\n\t\t\t\titems: await basicFetch(\r\n\t\t\t\t\t`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t];\r\n\t},\r\n\tgetMovieInfo: async (movieId, type) => {\r\n\t\tlet info = {};\r\n\r\n\t\tif (movieId) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"movie\":\r\n\t\t\t\t\tinfo = await basicFetch(\r\n\t\t\t\t\t\t`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"tv\":\r\n\t\t\t\t\tinfo = await basicFetch(\r\n\t\t\t\t\t\t`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tinfo = null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn info;\r\n\t},\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./MovieRow.css\";\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default ({ title, items }) => {\r\n\r\n  const [scrollX, setScrollX] = useState(0); \r\n\r\n  const handleLeftArrow = () =>{\r\n    // scrollando metade da tela do usuário \r\n    let x = scrollX + Math.round(window.innerWidth / 2);\r\n    if(x > 0){\r\n      x = 0\r\n    }\r\n    setScrollX(x);\r\n  };\r\n  const handleRightArrow = () =>{\r\n    let x = scrollX - Math.round(window.innerWidth / 2);\r\n    let listW = items.results.length * 200;\r\n    if((window.innerWidth - listW) > x){\r\n      //diminuindo um pouco o tamanho pra não exceder o limite contando com o padding tbm\r\n      x = (window.innerWidth - listW) - 60;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n\r\n  return (\r\n    <div className=\"movieRow\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n        <NavigateBeforeIcon style={{fontSize: 50}} />\r\n      </div>\r\n      <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n        <NavigateNextIcon style={{fontSize: 50}} />\r\n      </div>\r\n\r\n      <div className=\"movieRow--listarea\">\r\n        <div className=\"movieRow--list\" style={{\r\n          marginLeft: scrollX,\r\n          // fazendo com que cada linha tenha o tamanho especifico necessário para não quebrar\r\n          width: items.results.length * 200\r\n        }}>\r\n          {items.results.length > 0 &&\r\n            items.results.map((item, key) => (\r\n              <div className=\"movieRow--item\">\r\n                <img\r\n                  src={`http://image.tmdb.org/t/p/w300${item.poster_path}`}\r\n                  alt={item.original_title}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./FeaturedMovie.css\";\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default ({ item }) => {\r\n\tlet firstdate = new Date(item.first_air_date);\r\n\tlet genres = [];\r\n\t// pegando os nomes de todos os gêneros do objeto e jogando pra um array de gêneros\r\n\tfor (let i in item.genres) {\r\n\t\tgenres.push(item.genres[i].name);\r\n\t}\r\n\r\n\t//verificando se a descrição é grande e se for diminuir o tamanho e concatena com os ...\r\n\tlet description = item.overview;\r\n\tif (description.length > 200) {\r\n\t\tdescription = description.substring(0, 200) + \"...\";\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section\r\n\t\t\tclassName=\"featured\"\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundSize: \"cover\",\r\n\t\t\t\tbackgroundPosition: \"center\",\r\n\t\t\t\tbackgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div className=\"featured--vertical\">\r\n\t\t\t\t<div className=\"featured--horizontal\">\r\n\t\t\t\t\t<div className=\"featured--name\">{item.original_name}</div>\r\n\t\t\t\t\t<div className=\"featured--info\">\r\n\t\t\t\t\t\t<div className=\"featured--points\">\r\n\t\t\t\t\t\t\t{item.vote_average} pontos\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"featured--year\">\r\n\t\t\t\t\t\t\t{firstdate.getFullYear()}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"featured--season\">\r\n\t\t\t\t\t\t\t{item.number_of_seasons} temporada\r\n\t\t\t\t\t\t\t{item.number_of_seasons != 1 ? \"s\" : \"\"}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"featured--description\">{description}</div>\r\n\t\t\t\t\t<div className=\"featured--buttons\">\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref={`/watch/${item.id}`}\r\n\t\t\t\t\t\t\tclassName=\"featured--watchbutton\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t► Assistir\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref={`/list/add/${item.id}`}\r\n\t\t\t\t\t\t\tclassName=\"featured--addbutton\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t+ Minha Lista\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* separando por uma virgula e um espaço com o join */}\r\n\t\t\t\t\t<div className=\"featured--genres\">\r\n\t\t\t\t\t\t<strong>Gêneros</strong> {genres.join(\", \")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black}) =>{\r\n    return(\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\"></img>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Netflix_2015_N_logo.svg/1128px-Netflix_2015_N_logo.svg.png\" alt=\"User\"></img>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )  \r\n}","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  // useEffect do filme principal e da lista de filmes\n  useEffect(() => {\n      const loadAll = async () => {\n      // pegando a lista completa de filmes\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n \n      // Pegando o Featured\n      let originals = list.filter(i=>i.slug===\"originals\");\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n    loadAll();\n  }, []);\n\n  //useEffects para monitor o scroll e mudar o header dinamicamente \n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10){\n        setBlackHeader(true);\n      }else{\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n    return() =>{\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <Header />\n      {featuredData && (\n        <> \n          <FeaturedMovie item={featuredData}/>\n          <section className=\"lists\">\n          {movieList.map((item, key)=>(\n            <MovieRow key={key} title={item.title} items={item.items}/>\n          ))}\n          </section>\n          <footer>\n            Feito com <span role=\"img\" aria-label=\"coração\"> ❤️ </span> Por Angelo Fernandes <br/>\n            Direitos de imagem para Netflix<br/>\n            Dados pegos do site Themoviedb.org\n          </footer>\n        </>\n      )\n\n      }\n      {/* se nenhum filme foi carregado aparece o loading */}\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://i.gifer.com/origin/36/36527397c208b977fa3ef21f68c0f7b2.gif\" alt=\"carregando\"></img>\n        </div>\n      }\n\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}